version: 2.1

commands:
  # Checkout repo, restore cache and update Cargo.lock
  eg_init:
    steps:
      - checkout
      - restore_cache:
          key: v1-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
      - run: cargo update

  # Save cache
  eg_finish:
    steps:
      - save_cache:
          key: v1-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Environment.CIRCLE_JOB }}-{{ checksum "Cargo.toml" }}
          paths:
            - ./target
            - /home/circleci/.cargo/registry

jobs:
  # Check that everything (tests, benches, etc) builds using the MSRV
  precheck-msrv:
    resource_class: large
    docker: &docker
      - image: jamwaffles/circleci-embedded-graphics:1.61.0-0
        auth:
          username: jamwaffles
          password: $DOCKERHUB_PASSWORD
    steps:
      - eg_init
      - run: just build
      - eg_finish

  # Check that everything (tests, benches, etc) builds using the latest stable Rust version
  precheck-stable:
    resource_class: large
    docker: *docker
    steps:
      - run: rustup default stable
      - eg_init
      - run: just build-without-fmt-check
      - eg_finish

  # Check that everything (tests, benches, etc) builds using the latest Rust beta
  precheck-beta:
    resource_class: large
    docker: *docker
    steps:
      - run: rustup default beta
      - eg_init
      - run: just build-without-fmt-check
      - eg_finish

  # Build crates for embedded target
  all-targets:
    resource_class: large
    docker: *docker
    steps:
      - eg_init
      - run: just install-targets
      - run: just build-targets --release
      - eg_finish

workflows:
  build_all:
    jobs:
      - precheck-msrv
      - precheck-stable
      - precheck-beta
      - all-targets
