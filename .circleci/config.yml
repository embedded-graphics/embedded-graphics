# Check that everything (tests, benches, etc) builds in std environments
precheck_steps: &precheck_steps
  docker:
    - image: jamwaffles/circleci-embedded-graphics:1.40.0
  steps:
    - checkout
    - restore_cache:
        key: v5-embedded-graphics-{{ .Environment.CIRCLE_JOB }}-{{ checksum "embedded-graphics/Cargo.toml" }}-{{ checksum "tinybmp/Cargo.toml" }}-{{ checksum "tinytga/Cargo.toml" }}-{{ checksum "simulator/Cargo.toml" }}
    - run: rustup default ${RUST_VERSION:-stable}
    - run: rustup component add rustfmt
    - run: cargo update
    - run: just build
    - save_cache:
        key: v5-embedded-graphics-{{ .Environment.CIRCLE_JOB }}-{{ checksum "embedded-graphics/Cargo.toml" }}-{{ checksum "tinybmp/Cargo.toml" }}-{{ checksum "tinytga/Cargo.toml" }}-{{ checksum "simulator/Cargo.toml" }}
        paths:
          - ./target
          - /usr/local/cargo/registry

# Build crates for embedded target
target_steps: &target_steps
  docker:
    - image: jamwaffles/circleci-embedded-graphics:1.40.0
  steps:
    - checkout
    - restore_cache:
        keys:
          - v5-embedded-graphics-{{ .Environment.CIRCLE_JOB }}-{{ checksum "embedded-graphics/Cargo.toml" }}-{{ checksum "tinybmp/Cargo.toml" }}-{{ checksum "tinytga/Cargo.toml" }}-{{ checksum "simulator/Cargo.toml" }}
    - run: just install-targets
    - run: cargo update
    - run: just build-targets --release
    - save_cache:
        key: v5-embedded-graphics-{{ .Environment.CIRCLE_JOB }}-{{ checksum "embedded-graphics/Cargo.toml" }}-{{ checksum "tinybmp/Cargo.toml" }}-{{ checksum "tinytga/Cargo.toml" }}-{{ checksum "simulator/Cargo.toml" }}
        paths:
          - ./target
          - /usr/local/cargo/registry

version: 2
jobs:
  precheck-stable:
    <<: *precheck_steps
  precheck-beta:
    environment:
      - RUST_VERSION: "beta"
    <<: *precheck_steps

  all-targets:
    <<: *target_steps

build_jobs: &build_jobs
  jobs:
    - precheck-stable
    - precheck-beta
    - all-targets

workflows:
  version: 2
  build_all:
    <<: *build_jobs

  # Build every day
  nightly:
    <<: *build_jobs
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
